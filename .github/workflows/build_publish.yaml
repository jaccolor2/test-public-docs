# If we tag the docs here we automatically create a PR to the public repo

name: Build and Publish

on:
  push:
    # We only deploy on tags and main branch
    tags:
      # Only run on tags that match the following regex
      # This will match tags like v1.0.0, v1.0.1, etc.
      - v[0-9]+.[0-9]+.[0-9]+
  
jobs:
  create_pr_on_public:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Pull public updates
        env: # We cannot use the github bot token to push to the public repo, we have to use one with more permissions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |

          set -x
          git config --global user.name "GitHub Actions"
          git config --global user.email "mayo@mistral.ai"

          git remote add public https://github.com/jaccolor2/test-public-docs.git
          git remote update
          git status

          # Create a diff of the changes, ignoring the ci workflow
          git merge public/main --no-commit --no-ff --no-edit --allow-unrelated-histories

          # If there are changes, commit them
          if ! git diff-index --cached --quiet HEAD; then
            git commit -m "Update from public repo"
            git push origin ${{github.ref}}
          else
            echo "No changes to apply"
          fi

      - name: Push to public repo
        env:
          GITHUB_TOKEN: ${{ secrets.DOCS_WRITE_TOKEN }}
        run: |
          git checkout public/main
          git checkout -b doc/${{github.ref_name}}

          # Initialize and update submodules recursively
          git submodule update --init --recursive

          # write version number to version file
          echo ${{github.ref_name}} > version.txt

          # Get the submodule status from the source branch
          SOURCE_SUBMODULES=$(git rev-parse ${{github.ref_name}}:|git ls-tree -r --name-only -z|grep -z '^.*\.gitmodules$'||:)
          if [ -n "$SOURCE_SUBMODULES" ]; then
            git submodule update --recursive --checkout
          fi

          # Create diff including submodules
          git diff --submodule=diff ${{github.ref_name}} > changes.diff || true

          # Apply changes including submodules
          git apply --index changes.diff || true

          # Update submodules to their correct commits
          git submodule update --init --recursive

          git add .
          git commit -m "Update version to ${{github.ref_name}}"

          # Push with submodules
          git push public doc/${{github.ref_name}}
          git submodule foreach --recursive 'git push --all'

          # Create PR
          gh pr create --title "Update docs to ${{github.ref_name}}" \
                      --body "This PR was automatically created by a GitHub Action" \
                      --base main \
                      --head doc/${{github.ref_name}} \
                      --repo mistralai/platform-docs-public
