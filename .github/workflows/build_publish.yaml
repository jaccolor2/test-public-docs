# If we tag the docs here we automatically create a PR to the public repo

name: Build and Publish

on:
  push:
    # We only deploy on tags and main branch
    tags:
      # Only run on tags that match the following regex
      # This will match tags like v1.0.0, v1.0.1, etc.
      - v[0-9]+.[0-9]+.[0-9]+
  
jobs:
  create_pr_on_public:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DOCS_WRITE_TOKEN }}
          fetch-depth: 0

      - name: Pull public updates
        env: # We cannot use the github bot token to push to the public repo, we have to use one with more permissions
          GITHUB_TOKEN: ${{ secrets.DOCS_WRITE_TOKEN }}
        run: |

          set -x
          git config --global user.name "GitHub Actions"
          git config --global user.email "mayo@mistral.ai"

          git remote add public https://github.com/jaccolor2/test-public-docs.git
          git remote update
          git status

          # Create a diff of the changes, ignoring the ci workflow
          git merge public/main --no-commit --no-ff --no-edit --allow-unrelated-histories

          # If there are changes, commit them
          if ! git diff-index --cached --quiet HEAD; then
            git commit -m "Update from public repo"
            git push origin ${{github.ref}}
          else
            echo "No changes to apply"
          fi

      # In your Push to public repo step:
      - name: Push to public repo
        env:
          GITHUB_TOKEN: ${{ secrets.DOCS_WRITE_TOKEN }}
        run: |
          git checkout public/main
          git checkout -b doc/${{github.ref_name}}

          # Initialize and update submodules recursively
          git submodule update --init --recursive

          # write version number to version file
          echo ${{github.ref_name}} > version.txt

          # Fixed submodule detection
          if git rev-parse ${{github.ref_name}}:.gitmodules >/dev/null 2>&1; then
            git submodule update --recursive --checkout
            # Create diff including submodules (simpler approach)
            git diff ${{github.ref_name}} --ignore-submodules=none > changes.diff || true
            git apply --index changes.diff || {
              echo "Patch failed, trying alternative approach"
              # Fallback: copy files directly instead of patching
              git rm -r . 2>/dev/null || true
              git checkout ${{github.ref_name}} -- . || true
              git submodule update --init --recursive
            }
          fi

          git add .
          git commit -m "Update version to ${{github.ref_name}}"

          # Use token in URL for authentication
          git push https://${{ secrets.DOCS_WRITE_TOKEN }}@github.com/jaccolor2/test-public-docs.git doc/${{github.ref_name}}

          # Push submodules with authentication
          git submodule foreach --recursive 'git push https://${{ secrets.DOCS_WRITE_TOKEN }}@github.com/jaccolor2/test-public-docs.git HEAD:ref/heads/doc/${{github.ref_name}} || true'

          # Create PR with explicit token
          gh pr create --title "Update docs to ${{github.ref_name}}" \
                      --body "This PR was automatically created by a GitHub Action" \
                      --base main \
                      --head doc/${{github.ref_name}} \
                      --repo jaccolor2/test-public-docs